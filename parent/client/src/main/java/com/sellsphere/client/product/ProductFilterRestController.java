package com.sellsphere.client.product;import com.sellsphere.client.customer.CustomerService;import com.sellsphere.common.entity.Customer;import com.sellsphere.common.entity.CustomerNotFoundException;import jakarta.validation.Valid;import lombok.RequiredArgsConstructor;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import java.security.Principal;import java.util.Map;/** * REST controller for handling product-related requests with filtering capabilities. * This controller provides endpoints for retrieving filtered products and filter counts. * * The filters are specified in the following formats: * - Single filter: filter=name,'value, description with commas' * - Multiple filters: filter=name1,value1&filter=name2,value2 */@RestController@RequestMapping("/filter")@RequiredArgsConstructorpublic class ProductFilterRestController {    private final ProductService productService;    private final CustomerService customerService;    /**     * Retrieves a page of filtered products based on the provided request parameters.     * The filtering criteria are validated by a custom argument resolver.     *     * @param pageRequest the request object containing filtering, sorting, and pagination information.     * @return a ResponseEntity containing the ProductPageResponse with the filtered products and pagination details.     */    @GetMapping("/products")    public ResponseEntity<ProductPageResponse> pageFilteredProducts(            @ProductFilter ProductPageRequest pageRequest, Principal principal    ) throws CustomerNotFoundException {        ProductPageResponse page;        if(principal != null) {            page = productService.listProducts(pageRequest, getAuthenticatedCustomer(principal));        } else {            page = productService.listProducts(pageRequest, null);        }        return ResponseEntity.ok(page);    }    /**     * Retrieves the counts of all available filters based on the provided request parameters.     * The filtering criteria are validated by a custom argument resolver.     *     * @param mapRequest the request object containing filtering criteria.     * @return a ResponseEntity containing a map with the counts of all available filters.     */    @GetMapping("/filter_counts")    public ResponseEntity<Map<String, Map<String, Long>>> getFilterMapCount(            @Valid @ProductFilter FilterMapCountRequest mapRequest    ) {        Map<String, Map<String, Long>> allFilterCounts = productService.calculateAllFilterCounts(mapRequest);        return ResponseEntity.ok(allFilterCounts);    }    private Customer getAuthenticatedCustomer(Principal principal) throws CustomerNotFoundException {        return customerService.getByEmail(principal.getName());    }}